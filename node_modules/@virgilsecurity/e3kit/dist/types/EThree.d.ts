/// <reference types="node" />
import { CardManager, VirgilCardVerifier, IKeyEntryStorage, IAccessTokenProvider } from 'virgil-sdk';
import { VirgilPublicKey, VirgilCrypto, VirgilCardCrypto, VirgilPrivateKey } from 'virgil-crypto/dist/virgil-crypto-pythia.es';
interface IEThreeInitOptions {
    keyEntryStorage?: IKeyEntryStorage;
    apiUrl?: string;
}
interface IEThreeCtorOptions extends IEThreeInitOptions {
    accessTokenProvider: IAccessTokenProvider;
}
export declare type KeyPair = {
    privateKey: VirgilPrivateKey;
    publicKey: VirgilPublicKey;
};
export declare type LookupResult = {
    [identity: string]: VirgilPublicKey;
};
declare type EncryptVirgilPublicKeyArg = LookupResult | VirgilPublicKey;
declare const _inProcess: unique symbol;
declare const _keyLoader: unique symbol;
export default class EThree {
    identity: string;
    virgilCrypto: VirgilCrypto;
    cardCrypto: VirgilCardCrypto;
    cardVerifier: VirgilCardVerifier;
    cardManager: CardManager;
    accessTokenProvider: IAccessTokenProvider;
    keyEntryStorage: IKeyEntryStorage;
    private [_keyLoader];
    private [_inProcess];
    static initialize(getToken: () => Promise<string>, options?: IEThreeInitOptions): Promise<EThree>;
    constructor(identity: string, options: IEThreeCtorOptions);
    register(): Promise<void>;
    rotatePrivateKey(): Promise<void>;
    restorePrivateKey(pwd: string): Promise<void>;
    cleanup(): Promise<void>;
    resetPrivateKeyBackup(pwd?: string): Promise<void>;
    encrypt(message: ArrayBuffer, publicKey?: EncryptVirgilPublicKeyArg): Promise<ArrayBuffer>;
    encrypt(message: string, publicKeys?: EncryptVirgilPublicKeyArg): Promise<string>;
    encrypt(message: Buffer, publicKey?: EncryptVirgilPublicKeyArg): Promise<Buffer>;
    decrypt(message: string, publicKey?: VirgilPublicKey): Promise<string>;
    decrypt(message: Buffer, publicKey?: VirgilPublicKey): Promise<Buffer>;
    decrypt(message: ArrayBuffer, publicKey?: VirgilPublicKey): Promise<Buffer>;
    lookupPublicKeys(identities: string): Promise<VirgilPublicKey>;
    lookupPublicKeys(identities: string[]): Promise<LookupResult>;
    changePassword(oldPwd: string, newPwd: string): Promise<void>;
    backupPrivateKey(pwd: string): Promise<void>;
    hasLocalPrivateKey(): Promise<Boolean>;
    private _publishCard;
    private _isOwnPublicKeysIncluded;
}
export {};
