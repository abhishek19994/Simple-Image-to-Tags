import { VirgilPrivateKey, VirgilCrypto } from 'virgil-crypto/dist/virgil-crypto-pythia.es';
import { IKeyEntryStorage, IAccessTokenProvider } from 'virgil-sdk';
export interface IPrivateKeyLoaderOptions {
    virgilCrypto: VirgilCrypto;
    accessTokenProvider: IAccessTokenProvider;
    keyEntryStorage: IKeyEntryStorage;
    apiUrl?: string;
}
export default class PrivateKeyLoader {
    private identity;
    options: IPrivateKeyLoaderOptions;
    private pythiaCrypto;
    private localStorage;
    private keyknoxClient;
    private keyknoxCrypto;
    constructor(identity: string, options: IPrivateKeyLoaderOptions);
    savePrivateKeyRemote(privateKey: VirgilPrivateKey, password: string): Promise<import("@virgilsecurity/keyknox/dist/types/entities").CloudEntry>;
    savePrivateKeyLocal(privateKey: VirgilPrivateKey): Promise<import("virgil-sdk").IKeyEntry>;
    loadLocalPrivateKey(): Promise<VirgilPrivateKey | null>;
    resetLocalPrivateKey(): Promise<void>;
    resetPrivateKeyBackup(password: string): Promise<void>;
    resetAll(): Promise<void>;
    restorePrivateKey(password: string): Promise<VirgilPrivateKey>;
    changePassword(oldPwd: string, newPwd: string): Promise<void>;
    hasPrivateKey(): Promise<boolean>;
    private handleResetError;
    private generateBrainPair;
    private getStorage;
}
