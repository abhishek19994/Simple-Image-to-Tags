/// <reference types="node" />
import { IAccessTokenProvider } from 'virgil-sdk';
import { CloudEntry, KeyEntry } from './entities';
import KeyknoxManager from './KeyknoxManager';
import { Meta, VirgilPrivateKey, VirgilPublicKey } from './types';
export default class CloudKeyStorage {
    private readonly keyknoxManager;
    private decryptedKeyknoxValue?;
    private cache;
    private syncWasCalled;
    constructor(keyknoxManager: KeyknoxManager);
    static create(options: {
        accessTokenProvider: IAccessTokenProvider;
        privateKey: VirgilPrivateKey;
        publicKeys: VirgilPublicKey | VirgilPublicKey[];
    }): CloudKeyStorage;
    storeEntries(keyEntries: KeyEntry[]): Promise<CloudEntry[]>;
    storeEntry(name: string, data: Buffer, meta?: Meta): Promise<CloudEntry>;
    updateEntry(name: string, data: Buffer, meta?: Meta): Promise<CloudEntry>;
    retrieveEntry(name: string): CloudEntry;
    retrieveAllEntries(): CloudEntry[];
    existsEntry(name: string): boolean;
    deleteEntry(name: string): Promise<void>;
    deleteEntries(names: string[]): Promise<void>;
    deleteAllEntries(): Promise<void>;
    updateRecipients(options: {
        newPrivateKey?: VirgilPrivateKey;
        newPublicKeys?: VirgilPublicKey | VirgilPublicKey[];
    }): Promise<void>;
    retrieveCloudEntries(): Promise<void>;
    private throwUnlessSyncWasCalled;
    private throwUnlessCloudEntryExists;
    private throwIfCloudEntryExists;
    private pushCacheEntries;
    private static createCloudEntry;
}
