/// <reference types="node" />
import { IAccessTokenProvider } from 'virgil-sdk';
import IKeyknoxClient from './clients/IKeyknoxClient';
import IKeyknoxCrypto from './cryptos/IKeyknoxCrypto';
import { DecryptedKeyknoxValue } from './entities';
import { VirgilPrivateKey, VirgilPublicKey } from './types';
export default class KeyknoxManager {
    private readonly accessTokenProvider;
    private myPrivateKey;
    private myPublicKeys;
    private readonly keyknoxClient;
    private readonly keyknoxCrypto;
    readonly privateKey: VirgilPrivateKey;
    readonly publicKeys: VirgilPublicKey | VirgilPublicKey[];
    constructor(accessTokenProvider: IAccessTokenProvider, privateKey: VirgilPrivateKey, publicKeys: VirgilPublicKey | VirgilPublicKey[], keyknoxClient?: IKeyknoxClient, keyknoxCrypto?: IKeyknoxCrypto);
    pushValue(value: Buffer, previousHash?: Buffer): Promise<DecryptedKeyknoxValue>;
    pullValue(): Promise<DecryptedKeyknoxValue>;
    resetValue(): Promise<DecryptedKeyknoxValue>;
    updateValue(options: {
        value: Buffer;
        previousHash: Buffer;
        newPrivateKey?: VirgilPrivateKey;
        newPublicKeys?: VirgilPublicKey | VirgilPublicKey[];
    }): Promise<DecryptedKeyknoxValue>;
    updateRecipients(options: {
        newPrivateKey?: VirgilPrivateKey;
        newPublicKeys?: VirgilPublicKey | VirgilPublicKey[];
    }): Promise<DecryptedKeyknoxValue>;
}
