/// <reference types="node" />
import { IAccessTokenProvider, IKeyEntry, IKeyEntryStorage } from 'virgil-sdk';
import CloudKeyStorage from './CloudKeyStorage';
import { KeyEntry } from './entities';
import { Meta, VirgilPrivateKey, VirgilPublicKey } from './types';
export default class SyncKeyStorage {
    private readonly cloudKeyStorage;
    private readonly keyEntryStorageWrapper;
    constructor(identity: string, cloudKeyStorage: CloudKeyStorage, keyEntryStorage: IKeyEntryStorage);
    static create(options: {
        identity: string;
        accessTokenProvider: IAccessTokenProvider;
        privateKey: VirgilPrivateKey;
        publicKeys: VirgilPublicKey | VirgilPublicKey[];
        keyEntryStorage: IKeyEntryStorage;
    }): SyncKeyStorage;
    storeEntries(keyEntries: KeyEntry[]): Promise<IKeyEntry[]>;
    storeEntry(name: string, data: Buffer, meta?: Meta): Promise<IKeyEntry>;
    updateEntry(name: string, data: Buffer, meta?: Meta): Promise<void>;
    retrieveEntry(name: string): Promise<IKeyEntry>;
    retrieveAllEntries(): Promise<IKeyEntry[]>;
    existsEntry(name: string): Promise<boolean>;
    deleteEntry(name: string): Promise<void>;
    deleteEntries(names: string[]): Promise<void>;
    deleteAllEntries(): Promise<void>;
    updateRecipients(options: {
        newPrivateKey?: VirgilPrivateKey;
        newPublicKeys?: VirgilPublicKey | VirgilPublicKey[];
    }): Promise<void>;
    sync(): Promise<void>;
    private throwUnlessKeyEntryExists;
    private throwIfKeyEntryExists;
    private syncKeyStorage;
}
