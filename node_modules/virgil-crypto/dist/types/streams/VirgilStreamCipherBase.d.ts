/// <reference types="node" />
import { WrappedVirgilSeqCipher } from '../common';
import { Data } from '../interfaces';
import { StringEncoding } from '../utils/anyToBuffer';
/**
 * @internal
 *
 * Base class for `VirgilStreamCipher` and `VirgilStreamDecipher` wrapping
 * a low-level `VirgilSeqCipher` object.
 */
export declare class VirgilStreamCipherBase {
    /**
     * Indicates whether the `final` method has been called.
     */
    private isFinished;
    /**
     * Indicates whether the `dispose` method has been called.
     * This can be `true` only in browser, because of the requirement to
     * manually free the memory used by C++ class instances from virgil-crypto.
     */
    private isDisposed;
    /**
     * Instance of `VirgilSeqCipher` native class.
     */
    protected seqCipher: WrappedVirgilSeqCipher;
    constructor();
    /**
     * Encrypt of decrypt chunk of data based on current mode.
     * @param {Data} data - Chunk of data to encrypt \ decrypt
     * @param {StringEncoding} encoding - If `data` is a string, specifies its
     * encoding, otherwise is ignored. Default is 'utf8'.
     *
     * @returns {Buffer} - Encrypted or decrypted chunk
     */
    update(data: Data, encoding?: StringEncoding): Buffer;
    /**
     * Returns any remaining encrypted or decrypted data depending on current
     * mode.
     * Once `final` has been called, this instance cannot be used to encrypt
     * or decrypt data, attempts to call any method including `final` will
     * result in an error being thrown.
     * This method also automatically calls `dispose`.
     */
    final(): Buffer;
    /**
     * Frees the memory occupied by {@link seqCipher} in the browser.
     * In node.js this is a noop.
     */
    dispose(): void;
    /**
     * @hidden
     */
    protected ensureLegalState(): void;
}
