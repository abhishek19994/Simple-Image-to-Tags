/// <reference types="node" />
import { VirgilPrivateKey } from '../VirgilPrivateKey';
import { VirgilStreamSignerBase } from './VirgilStreamSignerBase';
/**
 * Class responsible for generating signatures of streams of data.
 */
export declare class VirgilStreamSigner extends VirgilStreamSignerBase {
    /**
     * Initializes a new instance of `VirgilStreamSigner`.
     * `VirgilStreamSigner` objects are not meant to be created with the `new`
     * operator, use {@link VirgilCrypto.createStreamSigner} to create an instance.
     *
     * @internal
     */
    constructor();
    /**
     * Signs the data collected by {@link VirgilStreamSigner.update} method
     * and returns the signature.
     *
     * @param {VirgilPrivateKey} privateKey - The private key to use to
     * calculate the signature.
     * @param {boolen} [final] - Optional. Indicating whether to automatically
     * free the memory occupied by internal {@link seqSigner} object in the
     * browser.
     * Default is `true`. Pass `false` if you need to calculate more than one
     * signature of the same data with different keys.
     *
     * In node.js this argument is ignored because the memory will be freed by the
     * garbage collector.
     *
     * @returns {Buffer} The signature
     */
    sign(privateKey: VirgilPrivateKey, final?: boolean): Buffer;
}
