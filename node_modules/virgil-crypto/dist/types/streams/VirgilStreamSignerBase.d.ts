import { WrappedVirgilSeqSigner } from '../common';
import { Data } from '../interfaces';
import { StringEncoding } from '../utils/anyToBuffer';
/**
 * @internal
 * Base class for `VirgilStreamSigner` and `VirgilStreamVerifier` wrapping
 * a low-level `VirgilSeqSigner` object.
 */
export declare class VirgilStreamSignerBase {
    /**
     * Inidcates whether the `dispose` method has been called.
     */
    private _isDisposed;
    /**
     * Instance of `VirgilSeqSigner` native class.
     */
    protected seqSigner: WrappedVirgilSeqSigner;
    constructor();
    /**
     * Add new chunk of data to be signed or verified.
     * @param {Data} data - The chunk of data to be signed or verified.
     * @param {StringEncoding} [encoding] - If `data` is a string, specifies it's
     * encoding, otherwise is ignored. Default is 'utf8'.
     */
    update(data: Data, encoding?: StringEncoding): this;
    /**
     * Frees the memory occupied by {@link seqSigner} in the browser.
     * In node.js this is a noop.
     */
    dispose(): void;
    /**
     * @hidden
     */
    protected isDisposed(): boolean;
}
