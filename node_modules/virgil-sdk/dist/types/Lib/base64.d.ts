/// <reference types="node" />
export declare function base64Decode(input: string): Buffer;
export declare function base64Decode(input: string, outputEncoding: string): string;
/**
 * Encodes the `input` bytes into a string using base64 encoding.
 * If `input` is a string, it is first converted to byte array by decoding
 * it using `inputEncoding`.
 * @hidden
 * @param {Buffer | string} input
 * @param {string} inputEncoding
 * @returns {string}
 */
export declare function base64Encode(input: Buffer | string, inputEncoding?: string): string;
/**
 * Converts regular base64 encoded string to URL-safe base64 encoded string.
 * @hidden
 * @param {string} input - Regular base64 encoded string.
 * @returns {string} - URL-safe base64 encoded string.
 */
export declare function base64UrlFromBase64(input: string): string;
/**
 * Converts URL-safe base64 encoded string to regular base64 encoded string.
 * @hidden
 * @param {string} input - URL-safe base64 encoded string.
 * @returns {string} - Regular base64 encoded string.
 */
export declare function base64UrlToBase64(input: string): string;
/**
 * * Encodes the `input` bytes into a string using URL-safe base64 encoding.
 * If `input` is a string, it is first converted to byte array by decoding
 * it using `inputEncoding`.
 *
 * @hidden
 *
 * @param {string | Buffer} input - The input.
 * @param {string} inputEncoding - If `input` is a string, this parameter
 * specifies the encoding of the input string. If `input` is a `Buffer`, this
 * parameter is ignored.
 * @returns {string}
 */
export declare function base64UrlEncode(input: string | Buffer, inputEncoding?: string): string;
export declare function base64UrlDecode(input: string): Buffer;
export declare function base64UrlDecode(input: string, outputEncoding: string): string;
