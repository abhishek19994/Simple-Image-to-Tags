/// <reference types="node" />
import { IStorageAdapter, IStorageAdapterConfig } from './IStorageAdapter';
/**
 * Implementation of {@link IStorageAdapter} that uses file system for
 * persistence. For use in Node.js.
 */
export default class FileSystemStorageAdapter implements IStorageAdapter {
    private config;
    /**
     * Initializes a new instance of `FileSystemStorageAdapter`.
     * @param {IStorageAdapterConfig} config - Configuration options.
     * Currently only `dir` is supported and must be a file system path
     * to the folder where the data will be stored.
     */
    constructor(config: IStorageAdapterConfig);
    /**
     * @inheritDoc
     */
    store(key: string, data: Buffer): Promise<void>;
    /**
     * @inheritDoc
     */
    load(key: string): Promise<Buffer | null>;
    /**
     * @inheritDoc
     */
    exists(key: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    remove(key: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    update(key: string, data: Buffer): Promise<void>;
    /**
     * @inheritDoc
     */
    clear(): Promise<void>;
    /**
     * @inheritDoc
     */
    list(): Promise<Buffer[]>;
    private resolveFilePath;
    private hash;
}
